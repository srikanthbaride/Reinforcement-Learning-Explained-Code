name: Chapter Tests (Reusable)

on:
  workflow_call:
    inputs:
      chapter:
        description: "Chapter folder name (e.g., ch7_td_control)"
        required: true
        type: string
      python-version:
        description: "Python version to use"
        required: false
        default: "3.10"
        type: string
      extra-deps:
        description: "Extra pip packages to install (space-separated)"
        required: false
        default: ""
        type: string

jobs:
  test:
    name: Run tests for ${{ inputs.chapter }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      MPLBACKEND: Agg
      PYTHONDONTWRITEBYTECODE: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python-version }}
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          # Root requirements if present
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Minimal defaults + optional extras
          pip install numpy matplotlib pytest
          if [ -n "${{ inputs.extra-deps }}" ]; then
            pip install ${{ inputs.extra-deps }}
          fi

      - name: Show environment (debug)
        run: |
          python --version
          pip --version
          pip list

      - name: Run pytest (scoped to chapter if tests exist)
        shell: bash
        run: |
          set -euo pipefail
          CHAP="${{ inputs.chapter }}"
          TARGET=""
          if [ -d "tests/${CHAP}" ]; then
            TARGET="tests/${CHAP}"
          elif [ -f "tests/test_${CHAP}.py" ]; then
            TARGET="tests/test_${CHAP}.py"
          else
            # Fallback: run full suite
            TARGET=""
          fi

          echo "Chapter: ${CHAP}"
          if [ -n "${TARGET}" ]; then
            echo "Running targeted tests at: ${TARGET}"
            pytest -q "${TARGET}"
          else
            echo "No chapter-specific tests found; running full suite."
            pytest -q
          fi

      # Optional: upload pytest cache / reports if you later add them
      # - name: Upload junit report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: junit-${{ inputs.chapter }}
      #     path: reports/junit-${{ inputs.chapter }}.xml
      #     if-no-files-found: ignore
